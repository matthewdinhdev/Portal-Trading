import os
import requests
from dotenv import load_dotenv
from datetime import datetime
import logging
from typing import Dict, Any

# Get logger from the calling module
logger = logging.getLogger()

# Load environment variables
load_dotenv()

# Get Discord webhook URL from environment variables
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")


def get_color_for_recommendation(recommendation: str) -> int:
    """Get Discord embed color based on recommendation.

    Args:
        recommendation: Trading recommendation (BUY/SELL/HOLD)

    Returns:
        int: Discord color code
    """
    colors = {
        "BUY": 0x00FF00,  # Green
        "SELL": 0xFF0000,  # Red
        "HOLD": 0xFFFF00,  # Yellow
    }
    return colors.get(recommendation.upper(), 0x808080)  # Default to gray if unknown


def send_to_discord(analysis: Dict[str, Any]) -> bool:
    """Send trading analysis to Discord.

    Args:
        analysis: Dictionary containing trading analysis and recommendations.

    Returns:
        bool: True if message was sent successfully, False otherwise.
    """
    try:
        # Get Discord webhook URL from environment variable
        webhook_url = os.getenv("DISCORD_WEBHOOK_URL")
        if not webhook_url:
            logger.error("DISCORD_WEBHOOK_URL not set in environment variables")
            return False

        # Create Discord message
        message = {
            "embeds": [
                {
                    "title": f"üîÑ Trading Analysis: {analysis['symbol']}",
                    "color": get_color_for_recommendation(analysis["recommendation"]),
                    "fields": [
                        {
                            "name": "üìä Recommendation",
                            "value": f"```{analysis['recommendation']} (Confidence: {analysis['confidence']*100:.1f}%)```",
                            "inline": True,
                        },
                        {
                            "name": "üí∞ Position Size",
                            "value": f"```{analysis['position_size']*100:.1f}%```",
                            "inline": True,
                        },
                        {
                            "name": "üéØ Price Targets",
                            "value": f"Current Price: ${analysis['current_price']:.2f}\nStop Loss: ${analysis['price_targets']['stop_loss']:.2f}\nTake Profit: ${analysis['price_targets']['take_profit']:.2f}",
                            "inline": False,
                        },
                        {
                            "name": "üîç Analysis",
                            "value": analysis["reasoning"],
                            "inline": False,
                        },
                    ],
                    "timestamp": datetime.now().isoformat(),
                    "footer": {"text": "Generated by Portal Trading Bot"},
                }
            ]
        }

        # Send message to Discord
        response = requests.post(webhook_url, json=message)
        response.raise_for_status()

        return True

    except Exception as e:
        logger.error(f"Failed to send message to Discord: {str(e)}")
        return False
