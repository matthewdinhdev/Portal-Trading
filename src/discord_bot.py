import os
import requests
from dotenv import load_dotenv
from datetime import datetime
import json
import logging

# Get logger from the calling module
logger = logging.getLogger()

# Load environment variables
load_dotenv()

# Get Discord webhook URL from environment variables
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")


def format_discord_message(analysis, symbol, current_price):
    """Format the trading analysis into a Discord message with rich formatting.

    Creates an embed message with color-coded recommendations, position details,
    price targets, and reasoning for the trading decision.

    Args:
        analysis: Dictionary containing trading analysis from ChatGPT.
        symbol: The trading symbol (e.g., 'AAPL').
        current_price: Current price of the symbol.

    Returns:
        dict: Discord message payload containing formatted embed.
    """
    # Create color based on recommendation
    color_map = {"BUY": 0x00FF00, "SELL": 0xFF0000, "HOLD": 0xFFFF00}  # Green  # Red  # Yellow

    # Create the embed
    embed = {
        "title": f"üîÑ Trading Analysis: {symbol}",
        "color": color_map.get(analysis["recommendation"], 0x808080),
        "timestamp": datetime.now().isoformat(),
        "fields": [
            {"name": "üìä Recommendation", "value": f"```{analysis['recommendation']}```", "inline": True},
            {"name": "üí∞ Position Size", "value": f"```{analysis['position_size']*100:.1f}%```", "inline": True},
            {"name": "‚è±Ô∏è Trade Type", "value": f"```{analysis['trade_type'].title()}```", "inline": True},
            {
                "name": "üéØ Price Targets",
                "value": f"Current Price: ${current_price:.2f}\nStop Loss: ${analysis['price_targets']['stop_loss']}\nTake Profit: ${analysis['price_targets']['take_profit']}",
                "inline": True,
            },
            {
                "name": "üîç Reasoning",
                "value": "\n".join([f"‚Ä¢ {reason}" for reason in analysis["reasoning"]]),
                "inline": False,
            },
        ],
        "footer": {"text": "Generated by Portal Trading Bot"},
    }

    return {"embeds": [embed]}


def send_to_discord(analysis, symbol, current_price):
    """Send the trading analysis to Discord via webhook.

    Formats and sends a trading analysis message to a configured Discord channel
    using a webhook URL.

    Args:
        analysis: Dictionary containing trading analysis from ChatGPT.
        symbol: The trading symbol (e.g., 'AAPL').
        current_price: Current price of the symbol.

    Returns:
        bool: True if message was sent successfully, False otherwise.
    """
    if not DISCORD_WEBHOOK_URL:
        logger.warning("DISCORD_WEBHOOK_URL not found in environment variables")
        return False

    try:
        # Format the message
        message = format_discord_message(analysis, symbol, current_price)

        # Send to Discord
        response = requests.post(DISCORD_WEBHOOK_URL, json=message)

        # Check if successful
        if response.status_code == 204:
            return True
        else:
            logger.error(f"Failed to send to Discord. Status code: {response.status_code}")
            logger.error(f"Response: {response.text}")
            return False

    except Exception as e:
        logger.error(f"Error sending to Discord: {str(e)}")
        return False


def send_backtest_results(results):
    """Send backtest results to Discord channel via webhook.

    Formats and sends detailed backtest results including metrics, trade summary,
    and performance statistics to a configured Discord channel.

    Args:
        results: Dictionary containing backtest results including metrics,
            trade history, and performance statistics.

    Raises:
        Exception: If there's an error sending the message to Discord.
    """
    if not DISCORD_WEBHOOK_URL:
        logger.warning("DISCORD_WEBHOOK_URL not set in environment variables. Skipping Discord notification.")
        return

    try:
        # Create embed for results
        embed = {
            "title": "Backtest Results",
            "description": f"Results for {results.get('selected_day', 'Unknown Date')}",
            "color": 0x3498DB,  # Blue color
            "fields": [],
        }

        # Add metrics to embed
        metrics = results.get("metrics", {})
        embed["fields"].extend(
            [
                {"name": "Total Trades", "value": str(metrics.get("total_trades", 0)), "inline": True},
                {"name": "Day Trades", "value": str(metrics.get("day_trades", 0)), "inline": True},
                {"name": "Swing Trades", "value": str(metrics.get("swing_trades", 0)), "inline": True},
                {"name": "Win Rate", "value": f"{metrics.get('win_rate', 0):.2f}%", "inline": True},
                {"name": "Total PnL", "value": f"${metrics.get('total_pnl', 0):.2f}", "inline": True},
                {"name": "Final Equity", "value": f"${metrics.get('final_equity', 0):.2f}", "inline": True},
                {"name": "Total Return", "value": f"{metrics.get('total_return', 0):.2f}%", "inline": True},
                {"name": "Max Drawdown", "value": f"{metrics.get('max_drawdown', 0):.2f}%", "inline": True},
            ]
        )

        # Add trade summary
        trades = results.get("trades", [])
        if trades:
            trade_summary = "\n".join(
                [
                    f"{t['date']} - {t['type']} @ ${t['price']:.2f} ({t['quantity']} shares)"
                    for t in trades[-5:]  # Show last 5 trades
                ]
            )
            embed["fields"].append({"name": "Recent Trades", "value": trade_summary, "inline": False})

        # Send webhook
        response = requests.post(DISCORD_WEBHOOK_URL, json={"embeds": [embed]})

        if response.status_code == 204:
            logger.info("Successfully sent backtest results to Discord")
        else:
            logger.error(f"Failed to send to Discord. Status code: {response.status_code}")
            logger.error(f"Response: {response.text}")

    except Exception as e:
        logger.error(f"Error sending results to Discord: {str(e)}")
        raise


if __name__ == "__main__":
    # Example usage
    test_analysis = {
        "sentiment": "bullish",
        "key_signals": [
            "RSI showing oversold conditions",
            "MACD crossover imminent",
            "Price above 50-day moving average",
        ],
        "risk_level": "medium",
        "recommendation": "BUY",
        "explanation": "Strong technical setup with multiple confirmations",
        "confidence": 75,
        "stop_loss": "150.00",
        "take_profit": "165.00",
        "holding_period": "5-7 days",
        "risk_reward_ratio": "2.5:1",
        "position_size": "5%",
        "timestamp": datetime.now().isoformat(),
    }

    send_to_discord(test_analysis, "AAPL", 150.00)
